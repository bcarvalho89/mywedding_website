/**
 * Flex Grid -
 * Version: 0.3.2
 *
 * Simple grid built with flex box and sass.
 *
 * Matthew Simo - matthew.a.simo@gmail.com
 */

/**
 * Grid setup
 *
 * The grid will calculate dimensions based on these two variables:
 * $fg-columns will inform the grid loops how many columns there should be.
 * $fg-gutter will inform the grid loops how big eac column's gutters should be.
 *
 * The grid will name columns, rows, offsets based on these three variables:
 * $fg-class-row string used for the row class
 * $fg-class-col string used for the column class
 * $fg-class-off string used for the offset class
 */
 $fg-columns: 12 !default;
 $fg-gutter: 0.5rem !default;

 $fg-class-row: 'row' !default;
 $fg-class-col: 'col' !default;
 $fg-class-off: 'off' !default;



/**
 * Break point namespace object
 *
 * Set the default namespace object with these defaults with the
 * understanding that you can pass in whatever you might require for your site.
 *
 * $fg-breakpoints is a Sass list with nested lists inside. Each sub list defines two things.
 * 1. The namespace for that breakpoint. (Required) (i.e. xs, sm, md, lg)
 * 2. The min-width measurement for the breakpoint for that namespace. (i.e. 48em, 62em, 75em)
 *
 * Note: These should be in the proper order (at least till libsass handles map keys properly).
 *
 * Note: If the measurement is left out then it will be skipped when generating
 * the grid and applied to global styles.
 *
 */
 $fg-breakpoints: (
 	(xs),
 	(sm, 768px),
 	(md, 992px),
 	(lg, 1200px),
 	(xg, 1600px)
 	) !default;

/**
 * Class Name Defaults
 *
 * Define class names for columns, rows and offsets in case compatibility with other
 * libraries is necessary.
/**
 * Calculate column size percentage
 */
 @function get-col-percent($column-num) {

 	@return $column-num / $fg-columns * 100%;

 }

/**
 * Spacing mixin to create uniform margin/padding
 */
 @mixin spacing( $value, $type: margin, $orientation: vertical ) {
 	@if $orientation == vertical {
 		#{ $type }-top: $value;
 		#{ $type }-bottom: $value;
 		} @else {
 			#{ $type }-left: $value;
 			#{ $type }-right: $value;
 		}
 	}

/**
 * Row wrapper class, flex box parent.
 */
 .#{ $fg-class-row } {
 	box-sizing: border-box;
 	display: flex;
 	flex-direction: row;
 	flex-wrap: wrap;
 	@include spacing( ( -$fg-gutter ), margin, horizontal );
 }


 %#{ $fg-class-col } {
 	box-sizing: border-box;
 	display: flex;
 	flex-direction: column;
 	flex-grow: 0;
 	flex-shrink: 0;
 	@include spacing( ( $fg-gutter ), padding, horizontal );
 }

 %#{ $fg-class-col }-flex {
 	@extend %#{ $fg-class-col };
 	flex-grow: 1;
 	flex-basis: 0;
 	max-width: 100%;
 }


/**
 * Generate a set of grid column classes using a namespace
 *
 * .#{ $fg-class-col }-[namespace] for intelligent column division
 * .#{ $fg-class-col }-[namespace]-[number] for a column that covers a specific number of columns (e.g. 1-12 by default)
 * .#{ $fg-class-off }-[namespace]-[number] for pushing a col a specific number of columns (e.g. 1-11 by default)
 */

 @mixin grid-base( $namespace ) {
 	.#{ $fg-class-col }-#{$namespace} {
 		@extend %#{ $fg-class-col }-flex;
 	}

 	@for $i from 1 through $fg-columns {
 		.#{ $fg-class-col }-#{$namespace}-#{$i} {
 			@extend %#{ $fg-class-col };
 		}
 	}
 }

 @mixin grid-sizes( $namespace ) {

  // Run the loop for as many columns as speficied
  @for $i from 1 through $fg-columns {
  	.#{ $fg-class-col }-#{$namespace}-#{$i} {
  		flex-basis: get-col-percent($i);
  		max-width:  get-col-percent($i);
  	}
  }

  @for $i from 1 through $fg-columns {

    // Don't include the .off class for the last column
    @if ( $i != $fg-columns ) {
    	.#{ $fg-class-off }-#{$namespace}-#{$i} {
    		margin-left: get-col-percent($i);
    	}
    }

}

/* New */
.first-#{$namespace} {
	-webkit-box-ordinal-group: 0;
	-webkit-order: -1;
	-ms-flex-order: -1;
	order: -1;
}

.last-#{$namespace} {
	-webkit-box-ordinal-group: 2;
	-webkit-order: 1;
	-ms-flex-order: 1;
	order: 1;
}

.around-#{$namespace} {
	-ms-flex-pack: distribute;
	justify-content: space-around;
}

.between-#{$namespace} {
	-webkit-box-pack: justify;
	-ms-flex-pack: justify;
	justify-content: space-between;
}

.start-#{$namespace} {
	-webkit-box-pack: start;
	-ms-flex-pack: start;
	justify-content: flex-start;
	text-align: start;
}

.center-#{$namespace} {
	-webkit-box-pack: center;
	-ms-flex-pack: center;
	justify-content: center;
	text-align: center;
}

.end-#{$namespace} {
	-webkit-box-pack: end;
	-ms-flex-pack: end;
	justify-content: flex-end;
	text-align: end;
}

.top-#{$namespace} {
	-webkit-box-align: start;
	-ms-flex-align: start;
	align-items: flex-start;
}

.middle-#{$namespace} {
	-webkit-box-align: center;
	-ms-flex-align: center;
	align-items: center;
}

.bottom-#{$namespace} {
	-webkit-box-align: end;
	-ms-flex-align: end;
	align-items: flex-end;
}

}


/**
 * Build the grid in two steps, to help minimize file size
 * Step 1, for each namespace, create the grid-base
 * Step 2, for each namespace, wrap the col width/offset measurements in their breakpoint media query
 */
 @each $val in $fg-breakpoints {

 	$namespace: nth($val, 1);
 	@include grid-base( $namespace );

 }

 @each $val in $fg-breakpoints {
 	@if length($val) == 1 {

 		$namespace: nth($val, 1);
 		@include grid-sizes( $namespace );

 		} @else {

 			$namespace: nth($val, 1);
 			$size: nth($val, 2);

 			@media only screen and (min-width: #{$size}) {
 				@include grid-sizes( $namespace );
 			}
 		}
 	}


 	.wrap {
 		box-sizing: border-box;
 		max-width: 1200px;
 		margin: 0 auto;
 	}
 	.page-section {
 		padding-top: 3rem;
 		margin-bottom: 3rem;
 	}
 	.page-features {
 		width: 100%;
 		background: hsl(209, 100%, 10%);
 		overflow: scroll;
 	}
 	.box-row,
 	.box-first,
 	.box-nested,
 	.box-large,
 	.box {
 		box-sizing: border-box;
 		position: relative;
 		box-sizing: border-box;
 		min-height: 1rem;
 		margin-bottom: 0;
 		background: #007FFF;
 		border: 1px solid #FFF;
 		border-radius: 2px;
 		overflow: hidden;
 		text-align: center;
 		color: white;
 	}
 	.box-row {
 		margin-bottom: 1rem;
 	}
 	.box-first {
 		background: #0066CC;
 		border-color: #007FFF;
 	}
 	.box-nested {
 		background: #003366;
 		border-color: #007FFF;
 	}
 	.box-large {
 		height: 8rem;
 	}
 	.box-container {
 		box-sizing: border-box;
 		padding: 0.5rem;
 	}
 	.end {
 		text-align: end;
 	}
 	.invisible-xs {
 		display: none;
 		visibility: hidden;
 	}
 	.visible-xs {
 		display: block;
 		visibility: visible;
 	}
 	@media only screen and (min-width: 48rem) {
 		.box-row,
 		.box-first,
 		.box-nested,
 		.box-large,
 		.box {
 			padding: 1rem;
 		}
 		.invisible-md {
 			display: none;
 			visibility: hidden;
 		}
 		.visible-md {
 			display: block;
 			visibility: visible;
 		}
 	}